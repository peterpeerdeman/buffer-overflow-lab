use std::io::{BufRead, BufReader, Write};
use std::net::TcpStream;
use std::str;

pub fn interact(stream: &mut TcpStream) -> Result<usize, String> {

    let length: u32 = 5;
    let message = "hello";

    match stream.write(&length.to_le_bytes()) {
        Ok(stream) => stream,
        Err(e) => {
            return Err(format!("Failed to write length to stream: {}", e));
        }
    };

    match stream.write(&message.as_bytes()) {
        Ok(stream) => stream,
        Err(e) => {
            return Err(format!("Failed to write message to stream: {}", e));
        }
    };

    let mut reader = BufReader::new(stream);
    let mut buffer: Vec<u8> = Vec::new();
    let bytes_read = match reader.read_until(b'\n', &mut buffer) {
        Ok(stream) => stream,
        Err(e) => {
            return Err(format!("Could not read into buffer {}", e));
        }
    };

    match str::from_utf8(&buffer) {
        Ok(string) => {
            println!("Response: {}", string);
        }
        Err(e) => {
            return Err(format!("Failed to read from buffer: {}", e));
        }
    };

    Ok(bytes_read)
}

